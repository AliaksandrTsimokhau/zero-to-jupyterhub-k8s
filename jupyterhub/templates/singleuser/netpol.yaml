{{- if and .Values.singleuser.networkPolicy.enabled -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "jupyterhub.singleuser.fullname" . }}
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- $_ := merge (dict "componentLabel" "singleuser-server") . }}
      {{- include "jupyterhub.matchLabels" $_ | nindent 6 }}
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    {{- with .Values.singleuser.networkPolicy.allowedIngressPorts }}
    # allow incoming traffic to these ports independent of source
    - ports:
      {{- range $port := . }}
      - port: {{ $port }}
      {{- end }}
    {{- end }}

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"
        {{- if eq .Values.singleuser.networkPolicy.interNamespaceAccessLabels "accept" }}
          namespaceSelector:
            matchLabels: {}   # without this, the podSelector would only consider pods in the local namespace
        # source 2 - pods in labeled namespaces
        - namespaceSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"
        {{- end }}

    {{- with .Values.singleuser.networkPolicy.ingress }}
    # depends, but default is nothing --> singleuser-server
    {{- . | toYaml | nindent 4 }}
    {{- end }}

  egress:
    # singleuser-server --> hub
    - ports:
        - port: 8081
      to:
        - podSelector:
            matchLabels:
              {{- $_ := merge (dict "componentLabel" "hub") . }}
              {{- include "jupyterhub.matchLabels" $_ | nindent 14 }}

    # singleuser-server --> Kubernetes internal DNS
    - ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

    # User code should *always* be able to access the public facing URL
    # of the hub. When internal network access is blocked, NetworkPolicy
    # will not allow code to request https://<hub-externaal-url> from
    # user code. This can break hub services.
    # We explicitly allow this outbound access regardless of wether
    # we are using autohttps to provide HTTPS or not.
    - to:
        - podSelector:
            matchLabels:
              app: jupyterhub
              component: autohttps

        # Library code (such as dask-gateway) often wants a way to refer
        # to hub services without the user having to supply the domain the
        # hub is hosted at. Since the CHP proxy pod will always be running
        # and routing hub services, they use http://proxy-public as a URL
        # to route to hub services. This NetworkPolicy rule explicitly
        # allows that.
        - podSelector:
            matchLabels:
              app: jupyterhub
              component: proxy

    {{- if .Values.singleuser.networkPolicy.noPrivateIPAccess }}
    # Allow broad access to the external internet, but block all
    # access to private IPs. This means users can access the internet but not
    # (say) an unsecured prometheus server running in the same cluster. Given
    # that not all charts have proper NetworkPolicies setup, this is a defense
    # in depth measure that restricts the amount of damage someone could do if
    # they get an unauthorized login into the hub system.
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # Don't allow network access to private IP ranges
              # Listed in https://datatracker.ietf.org/doc/html/rfc1918
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
    {{- end }}

    {{- with .Values.singleuser.networkPolicy.egress }}
    # singleuser-server --> depends, but the default is everything
    {{- . | toYaml | nindent 4 }}
    {{- end }}
{{- end }}
